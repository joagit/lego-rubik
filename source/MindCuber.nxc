#define MOTOR_TABLE OUT_A
#define MOTOR_TABLE_NORMALSPEED 60
#define TABLE_GEAR_FACTOR 3

#define MOTOR_TABLE_MINSPEED 20
#define MOTOR_TABLE_MAXSPEED 100
#define MOTOR_TABLE_SCANSPEED 40
#define TABLE_OFFSET_FOR_TWIST 10
#define TABLE_OFFSET_EDGE       45

#define MOTOR_SCANNER OUT_B
#define SCANNERPOS_HOME      50
#define SCANNERPOS_CENTER    145
#define SCANNERPOS_CORNERS   170
#define SCANNERPOS_EDGES     167

#define MOTOR_FLIPPER OUT_C
#define FLIPPER_HOME_POS 0
#define FLIPPER_GRAB_POS -155
#define FLIPPER_TILT_POS -245
#define FLIPPER_HOME_TO_GRAB -155
#define FLIPPER_GRAB_TO_HOME 155
#define FLIPPER_GRAB_TO_TILT -90
#define FLIPPER_TILT_TO_GRAB 90
#define FLIPPER_TILT_TO_HOME 245
#define MOTOR_FLIPPER_NORMALSPEED 60
#define MOTOR_FLIPPER_TILTSPEED 60
#define TILTREST 300	// Time (ms) to rest before return tilterarm

#define SENSOR_COLOR    IN_2
#define SENSOR_DISTANCE IN_1

#define WHITE 0
#define YELLOW 1
#define RED 2
#define ORANGE 3
#define GREEN 4
#define BLUE 5

struct cube_color
{
  string str;
  float phi;
  float theta;
  float mn1;
  float mn2;
};
cube_color CubeColors[6];

#define  UPPERLEFT    0
#define  UPPERMID     1
#define  UPPERRIGHT   2
#define  MIDLEFT      3
#define  CENTER       4
#define  MIDRIGHT     5
#define  DOWNLEFT     6
#define  DOWNMID      7
#define  DOWNRIGHT    8

#define TOPFACE    0
#define BOTTOMFACE 1
#define FRONTFACE  2
#define BACKFACE   3
#define LEFTFACE   4
#define RIGHTFACE  5

//*****************************************************************************
// Debugging

#define TOUCH_PORT S3
#define STEPPER SENSOR_3

#define CHAR_WIDTH 8

int dbg_turn_table_position; //Current position of turntable
int dbg_scanner_position; //Current position of motor with color sensor

task sensor_value_reader()
{
  ResetRotationCount(MOTOR_TABLE);
  ResetRotationCount(MOTOR_SCANNER);
  while(true)
  {
    dbg_turn_table_position = MotorRotationCount(MOTOR_TABLE);
    dbg_scanner_position = MotorRotationCount(MOTOR_SCANNER);
    Wait(10);
  }
}

task sensor_value_displayer()
{
  TextOut(0,LCD_LINE1, "Table", DRAW_OPT_CLEAR_WHOLE_SCREEN);
  TextOut(0,LCD_LINE3, "ColorArm");
  TextOut(0,LCD_LINE5, "Flip");
  while(true)
  {
    NumOut(9*CHAR_WIDTH, LCD_LINE1, dbg_turn_table_position);
    NumOut(9*CHAR_WIDTH, LCD_LINE3, dbg_scanner_position);
    Wait(200);
  }
}

void waitForStepper()
{
  Wait(500);
  while (!ButtonPressed(BTNLEFT,true)) { }
}

//*****************************************************************************
// Tools

void ErrorMsg(int value, string call)
{
  TextOut(3,LCD_LINE2,call,true);
  TextOut(3,LCD_LINE4,"Invalid value");
  NumOut(7,LCD_LINE6,value);
  PlayFile("Woops.rso");
  Wait(2000);  
}

//*****************************************************************************
// Doing Moves

int flipperPosition;

int currentAngle;
int tiltPower=85; // parameter for tilting the cube; adjusted dynamically in Tilt()
int grabPower=85/11; // parameter for holding the cube; cal'd dynamically in Tilt()
bool cubeGrabbed=false; // stores wether cube is currently grabbed or not

void GrabCube()
{
	if (flipperPosition == FLIPPER_HOME_POS)
	{
  	RotateMotor(MOTOR_FLIPPER,MOTOR_FLIPPER_NORMALSPEED,FLIPPER_HOME_TO_GRAB);
    Wait(100);
    flipperPosition=FLIPPER_GRAB_POS;
  }
}


void ReleaseCube()
{
	if (flipperPosition == FLIPPER_GRAB_POS)
	{
    RotateMotor(MOTOR_FLIPPER,MOTOR_FLIPPER_NORMALSPEED,FLIPPER_GRAB_TO_HOME);
    Wait(100);
    flipperPosition=FLIPPER_HOME_POS;
  }
}

void Tilt()
{
  if (flipperPosition == FLIPPER_HOME_POS)
  {
    GrabCube();
  }
  RotateMotor(MOTOR_FLIPPER,MOTOR_FLIPPER_NORMALSPEED,FLIPPER_GRAB_TO_TILT);
  Wait(TILTREST);
  RotateMotor(MOTOR_FLIPPER,MOTOR_FLIPPER_NORMALSPEED,FLIPPER_TILT_TO_HOME);
  flipperPosition=FLIPPER_HOME_POS;
}

void Twist(int num)
{
  int direction;
  GrabCube();
  direction = sign(num);
  RotateMotor(MOTOR_TABLE,MOTOR_TABLE_NORMALSPEED,(num*90+direction*TABLE_OFFSET_FOR_TWIST)*TABLE_GEAR_FACTOR);
  RotateMotor(MOTOR_TABLE,MOTOR_TABLE_NORMALSPEED, -1*direction*TABLE_OFFSET_FOR_TWIST*TABLE_GEAR_FACTOR);
  ReleaseCube();
}

void TurnCube(int num)
{
  RotateMotor(MOTOR_TABLE, MOTOR_TABLE_NORMALSPEED, num*90*TABLE_GEAR_FACTOR);
}

//*****************************************************************************
// Reading Cube

int getColorFromRaw(int red, int green, int blue)
{
  float r, phi, theta, mn1, mn2;
  int retColor;
  float minDistance;
  r = sqrt(red*red + green*green + blue*blue);
  if (green == 0)
    phi = 0.0;
  else
    phi = atand(green/red);
  if (blue == 0) 
    theta = 0.0;
  else
    theta = acosd( blue/r );
  mn1 = sqrt(phi*phi + theta*theta);
  if (theta == 0)
    mn2 = 0.0;
  else
    mn2 = atand(theta/phi);
  retColor = -1;
  minDistance = 100000;
  for (int c=0;c<6;c++)
  {
    float currDistance = sqrt(pow(CubeColors[c].phi-phi,2) + pow(CubeColors[c].theta-theta,2) 
                                + pow(CubeColors[c].mn1-mn1,2) + pow(CubeColors[c].mn2-mn2,2));
    if ( minDistance > currDistance )
    {
      retColor = c;
      minDistance = currDistance;
    }
  }
  return retColor;
}

void ReadColor(int face, int pos)
{
  int simple_colorval, calcd_colorval;
  unsigned int raw[];
  unsigned int norm[];
  int scaled[];
  while(!ReadSensorColorEx(SENSOR_COLOR,simple_colorval,raw,norm,scaled));
  calcd_colorval = getColorFromRaw(raw[0], raw[1], raw[2]);
  /*
  
  Now, I still need to somehow stored the color I just determined ...
  
  */
}

inline void DrawFacelet(int pos)
{
  RectOut(59-(pos/3)*17,42-(pos%3)*17,15,15);
}


void ScanFace(int face,int c1,int c2,int c3,int c4,int c5,int c6,int c7,int c8,int endAngle)
{
  // *** Initialise table
  ResetTachoCount(MOTOR_TABLE);
  ClearScreen(); 
  waitForStepper();

  // *** scan center
  RotateMotorEx(MOTOR_SCANNER,20,SCANNERPOS_CENTER-SCANNERPOS_HOME,0,false,true);
  SetSensorColorFull(SENSOR_COLOR);
  ReadColor(face,CENTER);
  SetSensorType(SENSOR_COLOR,SENSOR_TYPE_NONE);
  DrawFacelet(CENTER); 

  // *** scan corners
  RotateMotorEx(MOTOR_SCANNER,20,SCANNERPOS_CORNERS-SCANNERPOS_CENTER,0,false,true);
  SetSensorColorFull(SENSOR_COLOR);
  ReadColor(face,c1);
  SetSensorType(SENSOR_COLOR,SENSOR_TYPE_NONE);
  DrawFacelet(UPPERRIGHT); 
  RotateMotorEx(MOTOR_TABLE,MOTOR_TABLE_SCANSPEED,-90,0,false,true);
  SetSensorColorFull(SENSOR_COLOR);
  ReadColor(face,c2);
  SetSensorType(SENSOR_COLOR,SENSOR_TYPE_NONE);
  DrawFacelet(DOWNRIGHT); 
  RotateMotorEx(MOTOR_TABLE,MOTOR_TABLE_SCANSPEED,-90,0,false,true);
  SetSensorColorFull(SENSOR_COLOR);
  ReadColor(face,c3);
  SetSensorType(SENSOR_COLOR,SENSOR_TYPE_NONE);
  DrawFacelet(DOWNLEFT); 
  RotateMotor(MOTOR_TABLE,MOTOR_TABLE_SCANSPEED,-90);
  SetSensorColorFull(SENSOR_COLOR);
  ReadColor(face,c4);
  SetSensorType(SENSOR_COLOR,SENSOR_TYPE_NONE);
  DrawFacelet(UPPERLEFT); 

  // *** scan edges
  RotateMotorEx(MOTOR_SCANNER,10,SCANNERPOS_EDGES-SCANNERPOS_CORNERS,0,false,true);
  RotateMotorEx(MOTOR_TABLE,MOTOR_TABLE_SCANSPEED,TABLE_OFFSET_EDGE,0,false,true);
  SetSensorColorFull(SENSOR_COLOR);
  ReadColor(face,c5);
  SetSensorType(SENSOR_COLOR,SENSOR_TYPE_NONE);
  DrawFacelet(MIDLEFT); 
  RotateMotorEx(MOTOR_TABLE,MOTOR_TABLE_SCANSPEED,90,0,false,true);
  SetSensorColorFull(SENSOR_COLOR);
  ReadColor(face,c6);
  SetSensorType(SENSOR_COLOR,SENSOR_TYPE_NONE);
  DrawFacelet(UPPERMID); 
  RotateMotorEx(MOTOR_TABLE,MOTOR_TABLE_SCANSPEED,90,0,false,true);
  SetSensorColorFull(SENSOR_COLOR);
  ReadColor(face,c7);
  SetSensorType(SENSOR_COLOR,SENSOR_TYPE_NONE);
  DrawFacelet(MIDRIGHT); 
  RotateMotorEx(MOTOR_TABLE,MOTOR_TABLE_SCANSPEED,90,0,false,true);
  SetSensorColorFull(SENSOR_COLOR);
  ReadColor(face,c8);
  SetSensorType(SENSOR_COLOR,SENSOR_TYPE_NONE);
  DrawFacelet(DOWNMID); 
  
  // *** reset scanner arm and table
  RotateMotorEx(MOTOR_SCANNER,20,SCANNERPOS_HOME-SCANNERPOS_CORNERS,0,false,true);
  currentAngle=-1;
}

void ScanCube()
{
  ScanFace(TOPFACE,UPPERRIGHT,UPPERLEFT,DOWNLEFT,DOWNRIGHT,DOWNMID,MIDLEFT,UPPERMID,MIDRIGHT,0);
  Tilt();
  ScanFace(BACKFACE,UPPERRIGHT,UPPERLEFT,DOWNLEFT,DOWNRIGHT,DOWNMID,MIDLEFT,UPPERMID,MIDRIGHT,0);
  Tilt();
  ScanFace(BOTTOMFACE,UPPERRIGHT,UPPERLEFT,DOWNLEFT,DOWNRIGHT,DOWNMID,MIDLEFT,UPPERMID,MIDRIGHT,-270);
  Tilt();
  ScanFace(LEFTFACE,UPPERRIGHT,UPPERLEFT,DOWNLEFT,DOWNRIGHT,DOWNMID,MIDLEFT,UPPERMID,MIDRIGHT,0);
  Tilt();
  ScanFace(FRONTFACE,UPPERLEFT,DOWNLEFT,DOWNRIGHT,UPPERRIGHT,MIDRIGHT,DOWNMID,MIDLEFT,UPPERMID,0);
  Tilt();
  ScanFace(RIGHTFACE,DOWNLEFT,DOWNRIGHT,UPPERRIGHT,UPPERLEFT,UPPERMID,MIDRIGHT,DOWNMID,MIDLEFT,-270);
  Tilt();
}

//*****************************************************************************
// Initialisations

void InitCubeRepresentation()
{
  CubeColors[WHITE].str = "White";
  CubeColors[WHITE].phi =   44.85;
  CubeColors[WHITE].theta = 55.98;
  CubeColors[WHITE].mn1 =   71.73;
  CubeColors[WHITE].mn2 =   51.30;

  CubeColors[YELLOW].str = "Yellow";
  CubeColors[YELLOW].phi =   41.37;
  CubeColors[YELLOW].theta = 61.82;
  CubeColors[YELLOW].mn1 =   74.39;
  CubeColors[YELLOW].mn2 =   56.21;

  CubeColors[RED].str = "Red";
  CubeColors[RED].phi =   35.30;
  CubeColors[RED].theta = 61.88;
  CubeColors[RED].mn1 =   71.26;
  CubeColors[RED].mn2 =   60.29;

  CubeColors[ORANGE].str = "Orange";
  CubeColors[ORANGE].phi =   37.69;
  CubeColors[ORANGE].theta = 63.40;
  CubeColors[ORANGE].mn1 =   73.76;
  CubeColors[ORANGE].mn2 =   59.27;

  CubeColors[BLUE].str = "Blue";
  CubeColors[BLUE].phi =   48.49;
  CubeColors[BLUE].theta = 48.79;
  CubeColors[BLUE].mn1 =   68.81;
  CubeColors[BLUE].mn2 =   45.18;

  CubeColors[GREEN].str = "Green";
  CubeColors[GREEN].phi =   52.24;
  CubeColors[GREEN].theta = 53.44;
  CubeColors[GREEN].mn1 =   74.74;
  CubeColors[GREEN].mn2 =   45.66;
}

void InitTilter()
{
  flipperPosition = FLIPPER_HOME_POS;
}

void Initialize()
{
  InitCubeRepresentation();
  InitTilter();
  SetSensorLowspeed(SENSOR_DISTANCE);
  SetSensorTouch(TOUCH_PORT);
}

void WaitForCube()
{
	int distance;
  TextOut(7,LCD_LINE2,"Einen Wuerfel,",true);
  TextOut(7,LCD_LINE3,"bitte.",false);
  Wait(500);
  unsigned long startTick=CurrentTick();
  do
  {
  	distance = SensorUS(SENSOR_DISTANCE);
    if(distance > 16)
      startTick=CurrentTick();
  }while((CurrentTick() - startTick < 1000) && !ButtonPressed(BTNCENTER,false));
  TextOut(20,LCD_LINE5,"THANK YOU!",true);
  PlayFile("Thank You.rso");
  Wait(2000);
}

//*****************************************************************************
// main part

task cube_tester()
{
  Initialize();
  WaitForCube();
  
  GrabCube(); waitForStepper();
  ReleaseCube(); waitForStepper();

  Tilt(); waitForStepper();
  Tilt(); waitForStepper();

  Twist(1); waitForStepper();

  
  /*
  TurnCube(1); waitForStepper();
  TurnCube(2); waitForStepper();
  TurnCube(3); waitForStepper();
  TurnCube(4); waitForStepper();
  TurnCube(-1); waitForStepper();
  TurnCube(-2); waitForStepper();
  TurnCube(-3); waitForStepper();
  TurnCube(-4); waitForStepper();
  */

  //ScanCube();
  
}

task main() {
   Precedes(cube_tester);
  //Precedes(sensor_value_reader, sensor_value_displayer, cube_tester);
}

